submodule base-config {
  yang-version 1.1;
  belongs-to topology { prefix topology; }

  import ietf-inet-types { prefix inet; }
  import tailf-common { prefix tailf; }
  import tailf-ncs { prefix ncs; }

  grouping base-config-service-grouping {
    list base-config {
      key topology;

      uses ncs:service-data;
      ncs:servicepoint base-config;

      uses base-config-grouping;
    }
  }

  grouping base-config-grouping {
    leaf topology {
      type leafref {
        path "/topologies/topology/name";
      }
    }
    leaf login-banner {
      type string;
    }

    container logging {
      presence true;
      container syslog-server {
        leaf ip-address {
          type inet:ipv4-address;
        }
        leaf port {
          type inet:port-number;
        }
      }
    }

    leaf ntp-server {
      type inet:ipv4-address;
    }

    container snmp-server {
      presence true;
      list host {
        key ip-address;
        leaf ip-address {
          type inet:ipv4-address;
        }
        leaf port {
          type inet:port-number;
        }
        leaf community-string {
          type string;
        }
      }
    }

    container grpc {
      presence true;
      leaf port {
        type inet:port-number;
      }
    }

    leaf interface-bandwidth {
      type uint32;
    }
    leaf lldp {
      type empty;
    }

    container static-routes {
      list route {
        key "source-device destination-device loopback-id";
        leaf source-device {
          type string;
          tailf:non-strict-leafref {
            path "deref(../../../topology)/../devices/device/device-name";
          }
        }
        leaf destination-device {
          type string;
          tailf:non-strict-leafref {
            path "deref(../../../topology)/../devices/device/device-name";
          }
          must "count(deref(../../../topology)/../links/" +
                     "link[a-end-device=current()]" +
                         "[z-end-device=current()/../source-device]) + " +
               "count(deref(../../../topology)/../links/" +
                     "link[z-end-device=current()]" +
                         "[a-end-device=current()/../source-device]) = 1" {
            tailf:dependency "../source-device";
            tailf:dependency "../../../../topology/links/link";
            error-message "source-device and destination-device must be " +
              "directly connect (with an entry in the topology links list.)";
          }
        }
        leaf loopback-id {
          type uint8;
          tailf:non-strict-leafref {
            path "deref(../../../topology)/.." +
                 "/ip-connectivity/loopback-interfaces/loopback/id";
          }
        }
        leaf return-route {
          type enumeration {
            enum source-device;
            enum source-subnet;
            enum none;
          }
          default source-subnet;
        }
      }

      container loopback-to-management {
        leaf device {
          type string;
          tailf:non-strict-leafref {
            path "deref(../../../topology)/../devices/device/device-name";
          }
        }
        leaf loopback-id {
          type uint8;
          tailf:non-strict-leafref {
            path "deref(../../../topology)/.." +
                 "/ip-connectivity/loopback-interfaces/loopback/id";
          }
        }
      }
    }

    container pce {
      leaf router {
        type string;
        tailf:non-strict-leafref {
          path "/topologies/topology/devices/device/device-name";
        }
      }
      leaf loopback-id {
        type uint8;
      }
      leaf password {
        type string;
      }
    }
  }
}
