submodule segment-routing {
  yang-version 1.1;
  belongs-to topology { prefix topology; }

  import tailf-common { prefix tailf; }
  import tailf-ncs { prefix ncs; }

  description
    "This submodule contains the segment-routing service which can enable
     various segment routing features on the devices in the IGP domain.";

  typedef sid {
    type uint32 {
      range "16000..1048575";
    }
  }
  typedef hexadectet {
    type string {
      length "0..4";
      pattern "[0-9a-fA-F]*";
    }
  }
  typedef flex-algo {
    type uint8 {
      range "128..255";
    }
  }

  grouping segment-routing-service-grouping {
    list segment-routing {
      tailf:sort-priority 1000;
      key igp;
      leaf igp {
        type leafref {
          path "/topologies/igp/name";
        }
      }

      uses ncs:service-data;
      ncs:servicepoint segment-routing;

      uses segment-routing-grouping;

      container srv6 {
        when "deref(deref(../igp)/../topology)/../ip-connectivity/ipv6" {
          tailf:dependency "/topologies/topology/ip-connectivity/ipv6";
        }
        presence true;
        uses srv6-grouping;
      }
    }
  }

  grouping segment-routing-grouping {
    container srgb {
      tailf:info "Segement Routing Global Block.";
      description "These bounds are used to configure the SRGB on each router";
      leaf lower-bound {
        type sid;
        default 16000;
      }
      leaf upper-bound {
        type sid;
        default 23999;
      }
    }

    leaf prefix-sid-start {
      type sid;
      default 16000;
      tailf:info
        "This value is added to the device ID to calculate the prefix-sid";
    }
    leaf pce {
      type empty;
      tailf:info "Configure the PCE peer from the base-config service.";
    }
    leaf autoroute-profile-id {
      type uint32;
    }

    list flex-algo {
      key id;
      description
        "Create flex-algo including prefix-sid-algorithm on the primary
         loopback interface and flex-algo affinity on each link interface.";
      leaf id {
        type flex-algo;
      }
      leaf metric-type-delay {
        type empty;
      }
      leaf affinity-exclude {
        type leafref {
          path "/topologies/topology/links/link/affinity";
        }
      }
      leaf srv6-locator {
        when "../../srv6";
        type string;
        tailf:info "Create an SRv6 locator for the flex-algo";
      }
    }
  }

  grouping srv6-grouping {
    leaf locator-prefix-start {
      type hexadectet;
      default "fcbb";
    }
  }
}
