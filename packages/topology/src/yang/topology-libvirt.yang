submodule topology-libvirt {
  yang-version 1.1;
  belongs-to topology { prefix topology; }

  import tailf-common { prefix tailf; }

  include topology-base;

  // Additional groupings are in a seperate submodule due to an NSO bug.
  // If the groupings are in the same submodule they are missing from the
  // compiled module.
  include topology-libvirt-subgroupings;

  description
    "This submodule contains the libvirt extensions to the topology model.";

  grouping topology-libvirt-grouping {
    description
      "This grouping refines and augments the topology-base-grouping so the
       topology model can be used with libvirt.";
    uses topology-base-grouping {
      refine "topology/links/link/a-end-interface" {
        config false;
        tailf:cdb-oper {
          tailf:persistent true;
        }
        description "The interface is automatically assigned.";
      }
      refine "topology/links/link/z-end-interface" {
        config false;
        tailf:cdb-oper {
          tailf:persistent true;
        }
        description "The interface is automatically assigned.";
      }

      augment "topology/links/link/a-end-interface" {
        uses libvirt-interface-grouping;
      }
      augment "topology/links/link/z-end-interface" {
        uses libvirt-interface-grouping;
      }

      augment "topology/networks/network/devices/device" {
        container interface {
          config false;
          tailf:cdb-oper {
            tailf:persistent true;
          }
          leaf id {
            type uint8;
          }
          uses libvirt-interface-grouping;
        }
      }

      augment "topology" {
        container libvirt {
          leaf hypervisor {
            type leafref {
              path "/topologies/libvirt/hypervisor/name";
            }
            description "The hypervisor the topology will run on";
          }
          action define {
            tailf:actionpoint libvirt-action;
            description
              "Convert the topology devices, links and networks into libvirt
               XML for corresponding domains, storage and networks and push to
               the hypervisor.";
            input {
              uses libvirt-action-input-grouping;
            }
            output {
              uses libvirt-action-output-grouping;
            }
          }
          action undefine {
            tailf:actionpoint libvirt-action;
            description
              "Undefine the corresponding domains, volumes and networks for
               this topology on the hypervisor.";
            input {
              uses libvirt-action-input-grouping;
            }
            output {
              uses libvirt-action-output-grouping;
            }
          }
          action start {
            tailf:actionpoint libvirt-action;
            description
              "Start the corresponding domains, volumes and networks for this
               topology on the hypervisor.";
            input {
              uses libvirt-action-input-grouping;
            }
            output {
              uses libvirt-action-output-grouping;
            }
          }
          action stop {
            tailf:actionpoint libvirt-action;
            description
              "Stop the corresponding domains, volumes and networks for this
               topology on the hypervisor.";
            input {
              uses libvirt-action-input-grouping;
            }
            output {
              uses libvirt-action-output-grouping;
            }
          }
        }

        container state-events {
          config false;
          tailf:cdb-oper {
            tailf:persistent true;
          }
          list event {
            leaf timestamp {
              type string;
            }
            leaf device {
              type leafref {
                path "../../../devices/device/device-name";
              }
            }
            leaf event-type {
              type enumeration {
                enum online;
                enum offline;
                enum warn;
              }
            }
            leaf ping-missed-packets {
              type string;
            }
          }
        }

        container operational-state-monitor {
          action start {
            tailf:actionpoint operational-state-monitor;
          }
          action stop {
            tailf:actionpoint operational-state-monitor;
          }
          action clear {
            tailf:actionpoint operational-state-monitor;
          }
          action status {
            tailf:actionpoint operational-state-monitor;
            output {
              leaf status {
                type enumeration {
                  enum running;
                  enum not-running;
                }
              }
              leaf process-pid {
                type uint32;
              }
            }
          }
        }

        action check-topology-status {
          tailf:actionpoint check-topology-status;
          description
            "Checks if the topology devices are reachable, and synchronizes
             them into NSO. Updates the device and topology status leaves.";
          input {
            leaf frequency {
              type enumeration {
                enum run-now {
                  tailf:info "Run once immediately";
                }
                enum schedule {
                  tailf:info "Run every 2 minutes until all devices are ready.";
                }
              }
              default run-now;
            }
          }
          output {
            list device {
              leaf name {
                type string;
              }
              leaf status {
                type provisioning-status;
              }
            }
          }
        }
        leaf provisioning-status {
          type provisioning-status;
          default undefined;
          config false;
          tailf:cdb-oper {
            tailf:persistent true;
          }
          description "Updated by the check-topology-status action.";
        }
      }

      augment "topology/links/link" {
        uses libvirt-network-grouping;
      }
      augment "topology/networks/network" {
        uses libvirt-network-grouping;
      }
      augment "topology/devices/device" {
        uses libvirt-device-grouping;
      }
    }
  }
}
