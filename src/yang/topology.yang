module topology {

  yang-version 1.1;
  namespace "http://example.com/topology";
  prefix topology;

  import tailf-common {
    prefix tailf;
  }
  import tailf-ncs {
    prefix ncs;
  }

  include topology-base;
  include topology-libvirt;
  include libvirt;
  include igp;
  include bgp;
  include segment-routing;
  include traffic-generator;

  typedef hexadectet-list {
    type string {
      pattern '[0-9a-fA-F]{0,4}(:[0-9a-fA-F]{0,4})*';
    }
  }
  container topologies {
    uses topology-libvirt-grouping;
    uses libvirt-hypervisor-grouping;
  }

  augment "/topologies/topology" {
    container ip-connectivity {
      presence true;
      uses ncs:service-data;
      ncs:servicepoint ip-connectivity;

      container loopback-interfaces {
        list loopback {
          key id;
          leaf id {
            type uint8;
          }
          leaf ipv4-subnet-start {
            type tailf:octet-list {
              tailf:value-length 3;
            }
            mandatory true;
          }
          leaf ipv6-subnet-start {
            type hexadectet-list {
              pattern '.*(:.*){0,4}';
            }
          }


          leaf primary {
            type empty;
            must "count(../../loopback/primary)=1" {
              error-message "Exactly 1 loopback interface must be primary";
            }
          }
        }
      }

      container physical-interfaces {
        leaf ipv4-subnet-start {
          type tailf:octet-list {
            tailf:value-length 1;
          }
          default 10;
        }
        leaf ipv6-subnet-start {
          type hexadectet-list {
            pattern '.*(:.*){0,2}';
          }
          default 2001;
        }
      }
    }
  }

  augment "/topologies" {
    uses igp-grouping;
    uses bgp-grouping;
    uses segment-routing-grouping;
    uses traffic-generator-grouping;
  }
}

